---
/**
 * AppInfo component
 *
 * Show information like version, author, settings, etc. using a modal dialog
 *
 * extra resources:
 * - https://web.dev/articles/building/a-dialog-component
 * - avoid using the 'autofocus' attribute? https://www.a11yproject.com/checklist/#content
 */

import { Image } from "astro:assets";
import settingsIcon from "@assets/square.svg";
import closeIcon from "@assets/x.svg";
import pkgInfo from "package.json";
import { SITE_TITLE } from "src/consts";
import GitHubLink from "@components/GitHubLink.astro";

const appVersion = pkgInfo.version;
const today = new Date();
---

<button id="info-open">
  <!-- <Image alt="open info" src={settingsIcon} /> -->
  <svg
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
    class="feather feather-info"
  >
    <line x1="12" y1="16" x2="12" y2="12"></line>
    <line x1="12" y1="8" x2="12.01" y2="8"></line>
  </svg>
</button>

{/* NOTE: dialog has display: none when closed */}
<dialog id="info-dialog">
  <button id="info-close" autofocus>
    <Image alt="close info" src={closeIcon} />
  </button>
  <div class="info-content">
    <p class="like-h4">{SITE_TITLE}</p>
    <p class="version">version: <code class="tag">{appVersion}</code></p>
    <GitHubLink />
    <p class="text-x-small">
      <span id="copyright-elem">&#169;</span>
      <span id="copyright-note">
        &#32;{today.getFullYear()} - ACME corp. <br />
      </span>
    </p>
    {
      !import.meta.env.PROD && (
        <div>
          <p class="text-small">
            <code>MODE: {import.meta.env.MODE}</code>
          </p>
        </div>
      )
    }
  </div>
</dialog>
<style>
  button {
    background: var(--color-white);
    box-shadow: var(--shadow-elevation-medium);
    /*  */
    border: var(--border-size-2) solid var(--color-black);
    border-radius: var(--radius-round);
    padding: 4px;
    margin: var(--size-base-m2); /* space for outline */
    /*  */
    flex: none;
    /*  */
    display: flex;
    flex-direction: column;
    flex-wrap: nowrap;
    align-items: center;
    justify-content: space-around;
  }
  button:active:not(:disabled) {
    background: radial-gradient(
      circle,
      hsla(170, 100%, 81%, 1) 0%,
      hsla(186, 100%, 69%, 1) 100%
    );
  }
  button svg {
    block-size: var(--size-base-3);
    inline-size: var(--size-base-3);
  }
  button#info-close {
    align-self: flex-end;
    /*  */
    border: var(--border-size-2) solid var(--color-black);
    border-radius: var(--radius-round);
    background-color: var(--color-white);
    /* box-shadow: var(--shadow-elevation-high); */
  }
  dialog:modal {
    position: fixed;
    margin: auto;
    border: none;
    background-color: transparent;
    /*  */
    display: flex;
    flex-direction: column;
  }
  dialog::backdrop {
    background: var(--color-white);
    opacity: 0.35;
  }

  .info-content {
    padding: var(--size-base-1);
    border: var(--border-size-2) solid var(--color-black);
    background-color: var(--color-white);
    text-align: center;
  }
</style>
<script>
  // use ids
  const showButton = document.getElementById("info-open");
  const closeButton = document.getElementById("info-close");
  const dialog = document.getElementById(
    "info-dialog"
  ) as HTMLDialogElement | null;

  if (showButton && closeButton && dialog) {
    showButton.addEventListener("click", () => {
      dialog.showModal();
    });
    closeButton.addEventListener("click", () => {
      dialog.close();
    });
    dialog.addEventListener("click", ({ target }) => {
      if (target) {
        const node = target as Node;
        // console.log(node.nodeName);
        if (node.nodeName === "DIALOG") {
          const dialog = node as HTMLDialogElement;
          dialog.close("dismiss");
        }
      }
    });
  }
</script>
